{"version":3,"file":"style.css","sources":["style.scss","df_core/_importer.scss","df_core/globalvars/_global_variables.scss","df_core/globalvars/variables/_common.scss","df_core/globalvars/variables/_colors.scss","df_core/globalvars/variables/_fonts.scss","df_core/globalvars/variables/_breakpoint.scss","df_core/globalvars/elements/_text-inputs-list.scss","df_core/globalvars/elements/_buttons-list.scss","df_core/utils/_all_utils.scss","df_core/utils/functions/_del_unit.scss","df_core/utils/functions/_vw_calculator.scss","df_core/utils/functions/_str_replace.scss","df_core/utils/mixins/background/_img_retina.scss","df_core/utils/mixins/background/_bg_attr.scss","df_core/utils/mixins/background/_bg_img.scss","df_core/utils/mixins/font/_font_family.scss","df_core/utils/mixins/font/_font_style.scss","df_core/utils/mixins/font/_line_height.scss","df_core/utils/mixins/etc/_clearfix.scss","df_core/utils/mixins/etc/_placeholder.scss","df_core/utils/mixins/etc/_text_overflow.scss","df_core/utils/mixins/etc/_vw_conversion.scss","df_core/utils/mixins/etc/_media_queries.scss","df_core/utils/mixins/icon/_triangle.scss","df_core/utils/mixins/icon/_svg.scss","df_core/utils/mixins/etc/_BEM.scss","df_core/utils/validators/_contains.scss","df_core/utils/validators/_contains-falsy.scss","df_core/utils/validators/_is-color.scss","df_core/utils/validators/_is-length.scss","df_core/utils/validators/_is-number.scss","df_core/utils/validators/_is-size.scss","custom/_all_custom.scss","custom/contents/_all_contents.scss","custom/layout/_all_layouts.scss","custom/partials/_all_partials.scss","custom/partials/pieces/_icons.scss","custom/partials/components/_boxs.scss"],"sourcesContent":["@import \"df_core/importer\";  // import 대상\r\n@import \"custom/all_custom\";  // import 대상\r\n\r\n\r\n// =============================================================================\r\n// BEM mixin\r\n// =============================================================================\r\n\r\n$selector: \"thisSelect\";\r\n$component:'test-compoent';\r\n\r\n@include b($component) {\r\n    background: red;\r\n\r\n        @include e(header){\r\n            font-size: 14px;\r\n\r\n            @include m(css) {\r\n                font-size: 18px;\r\n                font-weight: bold;\r\n            }\r\n        };\r\n}\r\n\r\n//단위 제거 믹스인\r\n.delete-unit{\r\n    content:'단위가 삭제된 값은?' delUnit(30px);\r\n    //어쩌구 저쩌구\r\n}\r\n\r\n// =============================================================================\r\n// background mixin\r\n// =============================================================================\r\n$bg-img-path: '../images/';\r\n.background-mixin{\r\n    /* 기본 이미지만 사용 */\r\n    @include bg-img($bg-img-path, 'basic_image.jpg', red);\r\n    /* 레티나 사용시 인자로 true전달 */\r\n    @include bg-img($bg-img-path, 'retina_image_width_color.jpg',green, true);\r\n    @include bg-img($bg-img-path, 'retina_image_width_color_other.jpg', true, skyblue);\r\n    @include bg-img($bg-img-path, 'retina_image.jpg', pink);\r\n    @include bg-img($bg-img-path, 'none-color-retina_image.jpg', true);\r\n}\r\n\r\n.with-color-background-mixin{\r\n    /* 컬러값까지 사용 */\r\n    @include bg-img($bg-img-path, 'basic_image.jpg', rgba(255, 255, 255, 0.3));\r\n}\r\n\r\n.background-attribute{\r\n    // background-repeat Flag(R, X, Y, N), background-position, background-size\r\n    @include bg-attr(R,left top, cover);\r\n    @include bg-attr(X, 50% 30%);\r\n    @include bg-attr(N, 30px 20px);\r\n    @include bg-attr(N, '', contain);\r\n}\r\n\r\n// =============================================================================\r\n// placeholder mixin\r\n// =============================================================================\r\n@include placeholder(){\r\n    color:gold;\r\n};\r\n\r\n// 특정 엘리먼트에 적용시 Selector를 파라미터로 전달\r\n.placeholder-elements{\r\n    input[type=text]{\r\n        font-size:24px;\r\n        line-height:2;\r\n    }\r\n    @include placeholder(#{'input[type=text]'}){\r\n        color:lemonchiffon;\r\n    };\r\n    color:rgba(red,0.8)\r\n}\r\n\r\n\r\n// =============================================================================\r\n// media-query & vw-convert mixin\r\n// =============================================================================\r\n\r\n/* 기본 PC 화면 구간 */\r\nbody{\r\n    &:before{\r\n        content: 'PC구간 : '  + $screen-pc-small +'~';\r\n    }\r\n}\r\n\r\n/// 폰트 스타일 믹스인\r\n//px단위용\r\n.font-px-unit{\r\n    @include px-font('bold', 12px, 24px);\r\n}\r\n\r\n//vw단위용\r\n.font-pc-vw-unit{\r\n    @include vw-font-pc('bold', 36, 26);  //vw 단위 반환\r\n}\r\n\r\n.pc-vw-test{\r\n    @include vw-convert-pc(padding, 30 50 20);\r\n}\r\n// line-height 믹스인\r\n.single-line-height-mixin{\r\n    @include line-height(1.3);\r\n    @include line-height(20px);\r\n}\r\n\r\n/* 키워드 입력형  break-point */\r\n@include break-point($tablet){\r\n    body{\r\n        &:before{\r\n            content: '타블릿 구간: '+ $screen-tablet-portrait + '~' +  $screen-tablet-max;\r\n        }\r\n    }\r\n\r\n    .font-tablet-vw-unit{\r\n        @include vw-font-tb('', 14, 23);\r\n    }\r\n\r\n    .tablet-vw-test{\r\n        @include vw-convert-tb(padding, 30 50 20);\r\n    }\r\n}\r\n\r\n@include break-point($mobile){\r\n    body{\r\n        &:before{\r\n            content: '모바일 구간: ~' +  $screen-mobile-max;\r\n        }\r\n    }\r\n\r\n    .mobile-vw-single{\r\n        @include vw-convert-mo(padding-left, 20);\r\n        @include vw-convert-mo(margin-top, 20);\r\n        @include vw-convert-mo(height, auto);\r\n    }\r\n    .mobile-vw-multi{\r\n        @include vw-convert-mo(padding, 30 auto 20);\r\n    }\r\n    .font-mobile-vw-unit{\r\n        @include vw-font-mo('', 32, 30);\r\n\r\n        //범용 vw-convert사용\r\n        @include vw-convert(padding, 20 auto, $psd-mobile-width);\r\n    }\r\n}\r\n\r\n/* 수치 입력형 break-point */\r\n@include break-point(1200px,min) {\r\n    ._1200-min-window{\r\n        color:gray;\r\n    }\r\n}\r\n\r\n@include break-point(1900px,max) {\r\n    ._1900-max-window{\r\n        color:pink;\r\n    }\r\n}\r\n\r\n\r\n@include break-point(1200px,1440px) {\r\n    .pc-vw-section{\r\n        color:red;\r\n       @include vw-convert(padding, 30 auto 30, $psd-pc-width);\r\n    }\r\n}\r\n\r\n@include break-point(1200px,1440px, portrait) {\r\n    .pc-vw-section-portrate{\r\n        color:red;\r\n        @include vw-convert(padding, 30 auto 30, $psd-pc-width);\r\n    }\r\n}\r\n\r\n@include break-point(600px,minH) {\r\n    body {\r\n        &:before {\r\n            content: '최소 높이 600px';\r\n        }\r\n    }\r\n}\r\n\r\n@include break-point(1200px,maxH) {\r\n    body {\r\n        &:before {\r\n            content: '최대 높이 1200px';\r\n        }\r\n    }\r\n}\r\n\r\n@include landscape(){\r\n    body{\r\n        &:before{\r\n            content:'가로화면';\r\n        }\r\n    }\r\n}\r\n\r\n@include portrait(){\r\n    body{\r\n        &:before{\r\n            content:'세로화면';\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n// =============================================================================\r\n// icon mixin\r\n// =============================================================================\r\n\r\n.icon-triangle{\r\n    //px 전용\r\n    &::after {\r\n        @include triangle(\"up\", 6rem, 12rem, #b25c9c);\r\n        content: \"\";\r\n    }\r\n}\r\n\r\n.common-icon{\r\n    @include bg-attr(N, 0 0, cover);\r\n\r\n    &.svg-icon-width-png{\r\n        /* svg아이콘 이미지와 fallback으로 사용될 png이미지 생성, fallback용 이미지 생성을 위해서는 true 전달 */\r\n        @include svg-clip($bg-img-path, 'svg_image.svg', true);\r\n\r\n\r\n    }\r\n    &.only-svg-icon{\r\n        /* svg 아이콘 이미지만생성 */\r\n        @include svg-clip($bg-img-path, 'only_svg_image.svg');\r\n    }\r\n}\r\n\r\na.btn{\r\n    margin-top: 20px;\r\n    display: inline-block;\r\n    font-size: 24px;\r\n    padding:10px 20px;\r\n    border:1px solid gray;\r\n    background: #fff;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","@import \"globalvars/global_variables\";\r\n@import \"utils/all_utils\";","@import \"variables/common\";\r\n@import \"variables/colors\";\r\n@import \"variables/fonts\";\r\n@import \"variables/breakpoint\";\r\n\r\n@import \"elements/text-inputs-list\";\r\n@import \"elements/buttons-list\";\r\n\r\n\r\n","// 경로 정의\r\n$path-common-img: '/common/img';\r\n$path-web-font: '/common/fonts' !default;\r\n\r\n// psd 가로 크기 정의(vw 단위 변환을 위한)\r\n$psd-pc-width:           1920px !default;\r\n$psd-tablet-width:       1280px !default;\r\n$psd-mobile-width:       750px !default;\r\n\r\n// IE8이상 지원\r\n$legacy-support-for-ie8: false !global;\r\n\r\n// IE9이상 지원\r\n$legacy-support-for-ie9: true !global !default;\r\n\r\n\r\n\r\n\r\n\r\n\r\n","// Color system\r\n\r\n$white:                           #fff;\r\n$base:                            #565656;\r\n$gray-100:                        #f0f3f5;\r\n$gray-200:                        #c2cfd6;\r\n$gray-300:                        #a4b7c1;\r\n$gray-400:                        #869fac;\r\n$gray-500:                        #678898;\r\n$gray-600:                        #536c79;\r\n$gray-700:                        #3e515b;\r\n$gray-800:                        #29363d;\r\n$gray-900:                        #151b1e;\r\n$black:                           #000 !default;\r\n\r\n$blue:                            #20a8d8;\r\n$indigo:                          #6610f2 !default;\r\n$purple:                          #6f42c1 !default;\r\n$pink:                            #e83e8c !default;\r\n$red:                             #f86c6b;\r\n$orange:                          #f8cb00;\r\n$yellow:                          #ffc107 !default;\r\n$green:                           #4dbd74;\r\n$teal:                            #20c997 !default;\r\n$cyan:                            #63c2de;\r\n\r\n$colors: (\r\n    blue:                           $blue,\r\n    indigo:                         $indigo,\r\n    purple:                         $purple,\r\n    pink:                           $pink,\r\n    red:                            $red,\r\n    orange:                         $orange,\r\n    yellow:                         $yellow,\r\n    green:                          $green,\r\n    teal:                           $teal,\r\n    cyan:                           $cyan,\r\n    white:                          $white,\r\n    gray:                           $gray-600,\r\n    gray-dark:                      $gray-800\r\n);\r\n\r\n$theme-colors: (\r\n    primary:                        $blue,\r\n    secondary:                      $gray-300,\r\n    success:                        $green,\r\n    info:                           $cyan,\r\n    warning:                        $yellow,\r\n    danger:                         $red,\r\n    light:                          $gray-100,\r\n    dark:                           $gray-800,\r\n\r\n    blue:                           $blue,\r\n    indigo:                         $indigo,\r\n    purple:                         $purple,\r\n    pink:                           $pink,\r\n    red:                            $red,\r\n    orange:                         $orange,\r\n    yellow:                         $yellow,\r\n    green:                          $green,\r\n    teal:                           $teal,\r\n    cyan:                           $cyan,\r\n\r\n    gray-100:                       $gray-100,\r\n    gray-200:                       $gray-200,\r\n    gray-300:                       $gray-300,\r\n    gray-400:                       $gray-400,\r\n    gray-500:                       $gray-500,\r\n    gray-600:                       $gray-600,\r\n    gray-700:                       $gray-700,\r\n    gray-800:                       $gray-800,\r\n    gray-900:                       $gray-900\r\n);\r\n","//  웹 폰트 폰트 페이스명, 파일명 정의\r\n$fonts-face-custom:(\r\n    //* 국문 폰트 페이스명: 파일명\r\n    SDGothicNeoR-Regular:        A400SDGothicNeoR-Regular,\r\n    SDGothicNeoSB-SemiBold:    A500SDGothicNeoSB-SemiBold,\r\n    SDGothicNeoB-Bold:             A600SDGothicNeoB-Bold,\r\n\r\n    //* 영문 폰트 페이스명: 파일명\r\n    NobelL-Light:                       A100NobelL-Light,\r\n    NobelBook-Regular:             A200NobelBook-Regular,\r\n    NobelR-Regular:                   A300NobelR-Regular,\r\n    NobelB-Bold:                        A400NobelB-Bold\r\n) !global !default;\r\n\r\n\r\n\r\n\r\n// 기본 폰트 스타일 정의\r\n$fonts-default: (\r\n    font-name:      unquote(\"'Malgun Gothic', '맑은 고딕', 'Apple SD Gothic Neo', 'Apple SD 고딕 Neo', 'Microsoft NeoGothic', 'Droid sans', Dotum, 돋움, 굴림, arial, Helvetica, sans-serif\"),\r\n    font-size:      12px,\r\n    line-height:    1.3\r\n) !global !default;\r\n\r\n//  기본 폰트 설정\r\n$fonts-default-size: map_get($fonts-default, font-size);\r\n$fonts-default-line-height: map_get($fonts-default, line-height);\r\n\r\n// 사용자 폰트 변수\r\n$fonts-face-default:                    map_get($fonts-default, font-name);\r\n$fonts-face-custom-light:          nth(map_keys($fonts-face-custom), 4);\r\n$fonts-face-custom-regular:       nth(map_keys($fonts-face-custom), 5), nth(map_keys($fonts-face-custom), 1);\r\n$fonts-face-custom-kr-regular:        nth(map_keys($fonts-face-custom), 1);\r\n$fonts-face-custom-en-regular:        nth(map_keys($fonts-face-custom), 5);\r\n$fonts-face-custom-en-x-regular:        nth(map_keys($fonts-face-custom), 6);\r\n$fonts-face-custom-lgt-regular:       nth(map_keys($fonts-face-custom), 4), nth(map_keys($fonts-face-custom), 1);\r\n$fonts-face-custom-smbold:      nth(map_keys($fonts-face-custom), 2);\r\n$fonts-face-custom-bold:           nth(map_keys($fonts-face-custom), 7), nth(map_keys($fonts-face-custom),3);\r\n$fonts-face-custom-kr-bold:           nth(map_keys($fonts-face-custom),3);","// 미디어쿼리 분기 지점 정의\r\n$custom-media-break-points : (\r\n    mobile-portrait:        320px,\r\n    mobile-landscape:       480px, //가로모드\r\n\r\n    tablet-portrait:        768px,\r\n    tablet-landscape:       1024px,\r\n\r\n    //pc-x-smaller-std:     1025px,\r\n    pc-smaller-std:         1281px,\r\n    pc-standard:            1600px, // 기준구간\r\n    pc-larger-std:          1920px, //최적화 구간\r\n    pc-x-larger-std:        2240px //대형 화면 대응 구간\r\n) !global !default;\r\n\r\n// 모바일 구간\r\n$screen-mobile-portrait:    map_get($custom-media-break-points, mobile-portrait);\r\n$screen-mobile-landscape:   map_get($custom-media-break-points, mobile-landscape);\r\n\r\n// 태블릿 구간\r\n$screen-tablet-portrait:    map_get($custom-media-break-points, tablet-portrait);\r\n$screen-tablet-landscape:   map_get($custom-media-break-points, tablet-landscape);\r\n\r\n// Desktop PC 구간\r\n$screen-pc-small:           map_get($custom-media-break-points, pc-smaller-std);\r\n$screen-pc-standard:        map_get($custom-media-break-points, pc-standard);\r\n$screen-pc-large:           map_get($custom-media-break-points, pc-larger-std);\r\n$screen-pc-x-large:         map_get($custom-media-break-points, pc-x-larger-std);\r\n\r\n// 구간별 최대 값 정의\r\n$screen-mobile-max:         ($screen-tablet-portrait - 1) !default;\r\n$screen-tablet-max:         ($screen-pc-small - 1) !default;\r\n$screen-pc-max:             ($screen-pc-large - 1) !default;\r\n\r\n\r\n// Breakpoint 기기 변수\r\n$mobile: ($screen-mobile-max, max);//~767px\r\n$tablet: ($screen-tablet-portrait, $screen-tablet-max); //768px~1279px\r\n$pc:     ($screen-pc-small, min); //1281px~","// Bourbon 5.0.0-beta.8\r\n// http://bourbon.io\r\n// Copyright 2011-2017 thoughtbot, inc.\r\n// MIT License\r\n\r\n/// A list of all _text-based_ HTML inputs.\r\n/// @type list\r\n/// @access private\r\n\r\n$_text-inputs-list: (\r\n        \"[type='color']\",\r\n        \"[type='date']\",\r\n        \"[type='datetime']\",\r\n        \"[type='datetime-local']\",\r\n        \"[type='email']\",\r\n        \"[type='month']\",\r\n        \"[type='number']\",\r\n        \"[type='password']\",\r\n        \"[type='search']\",\r\n        \"[type='tel']\",\r\n        \"[type='text']\",\r\n        \"[type='time']\",\r\n        \"[type='url']\",\r\n        \"[type='week']\",\r\n        \"input:not([type])\",\r\n        \"textarea\",\r\n);","/// A list of all HTML button elements.\r\n/// @type list\r\n/// @access private\r\n\r\n$_buttons-list: (\r\n  \"button\",\r\n  \"[type='button']\",\r\n  \"[type='reset']\",\r\n  \"[type='submit']\",\r\n);\r\n","// functions\r\n@import \"functions/del_unit\";\r\n@import \"functions/vw_calculator\";\r\n@import \"functions/str_replace\";\r\n\r\n// mixins\r\n@import \"mixins/background/img_retina\";\r\n@import \"mixins/background/bg_attr\";\r\n@import \"mixins/background/bg_img\";\r\n\r\n@import \"mixins/font/font_family\";\r\n@import \"mixins/font/font_style\";\r\n@import \"mixins/font/line_height\";\r\n\r\n@import \"mixins/etc/clearfix\";\r\n@import \"mixins/etc/placeholder\";\r\n@import \"mixins/etc/text_overflow\";\r\n@import \"mixins/etc/vw_conversion\";\r\n@import \"mixins/etc/media_queries\";\r\n\r\n@import \"mixins/icon/triangle\";\r\n@import \"mixins/icon/svg\";\r\n\r\n@import \"mixins/etc/BEM\";\r\n\r\n@import \"validators/contains\";\r\n@import \"validators/contains-falsy\";\r\n@import \"validators/is-color\";\r\n@import \"validators/is-length\";\r\n@import \"validators/is-number\";\r\n@import \"validators/is-size\";\r\n","// 단위 제거 함수\r\n@function delUnit($value) {\r\n    @return ($value / ($value * 0 + 1))\r\n}","@function vw-cal($px, $psd-size){\r\n    $vwVal: (($px / delUnit($psd-size)) * 100) + vw;\r\n    @return $vwVal;\r\n}\r\n","@function str-replace($string, $search, $replace: \"\") {\r\n    $index: str-index($string, $search);\r\n\r\n    @if $index {\r\n        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);\r\n    }\r\n\r\n    @return $string;\r\n}","/// Background Image 고해상도 버전 생성\r\n/// @access private\r\n/// @정의된 레티나 이미지 구분: sample2x.jpg\r\n/// @group background\r\n\r\n@mixin img-retina($img-path, $image) {\r\n    $start: str-index($image, '.')-1;\r\n    $file: (str_slice($image, 0, $start));\r\n    $ext: str_slice($image, $start+1);\r\n    $image : $file + $ext;\r\n\r\n\r\n    background-image: url(\"#{$img-path + $image}\");\r\n\r\n    @media\r\n    only screen and (-webkit-min-device-pixel-ratio: 2),\r\n    only screen and (   min--moz-device-pixel-ratio: 2),\r\n    only screen and (     -o-min-device-pixel-ratio: 2/1),\r\n    only screen and (        min-device-pixel-ratio: 2),\r\n    only screen and (                min-resolution: 192dpi),\r\n    only screen and (                min-resolution: 2dppx) {\r\n        $file: $file + '2x';\r\n        $image : $file + $ext;\r\n        background-image: url(\"#{$img-path + $image}\");\r\n    }\r\n}","/// Background-image Property\r\n/// @access public\r\n/// @param {Value} String : value(repeat, position, size)\r\n/// @group background\r\n\r\n@mixin bg-attr($repeat:null, $position:null, $size:null){\r\n    @if($repeat != null and $repeat != ''){\r\n        @if($repeat == R){\r\n            background-repeat: repeat;\r\n        }@else if($repeat == X) {\r\n            background-repeat: repeat-x;\r\n        }@else if($repeat == Y){\r\n            background-repeat: repeat-y;\r\n        }@else if($repeat == N){\r\n            background-repeat: no-repeat;\r\n        }@else{\r\n\r\n        }\r\n    }\r\n\r\n    @if($position != null and $position != ''){\r\n        background-position: $position;\r\n    }\r\n\r\n\r\n    @if($size != null and $size != ''){\r\n        background-size: $size;\r\n    }\r\n}","/// Background Image\r\n/// @access public\r\n/// @param {string} 백그라운드 이미지\r\n/// @param {string} 백그라운드 컬러값\r\n/// @param {boolean} 레티나 이미지 사용 선택\r\n/// @group background\r\n\r\n@mixin bg-img($args...){\r\n    $img-path: nth($args, 1);\r\n    $image: nth($args, 2);\r\n    $useRetina:false;\r\n\r\n  //@debug 'bg-img:' $image;\r\n\r\n    @each $i in $args{\r\n        @if(type_of($i) == bool){\r\n            $useRetina: $i;\r\n        }@else if(type_of($i) == color){\r\n            // background color\r\n            background-color: $i;\r\n        }\r\n    }\r\n    //\r\n    //// background image\r\n    @if($image !=null and $image != '') {\r\n        @if($useRetina){\r\n            @include img-retina($img-path, $image);\r\n       }@else{\r\n           background-image: url($img-path + $image);\r\n        }\r\n    }\r\n}","/// ** Font family **\r\n/// @param {Value}\r\n/// @디자인 스타일 가이드에 따른 폰트 타입 정의\r\n/// @group fonts\r\n\r\n@mixin font-family($type: null){\r\n    @if($type == 'common'){\r\n        font-family: $fonts-face-custom-regular, $fonts-face-default;\r\n    }@else if($type == 'light'){\r\n        font-family: $fonts-face-custom-light;\r\n    }@else if($type == 'regular'){ //국문 regualr,  영문 book-regular\r\n        font-family: $fonts-face-custom-regular;\r\n    }@else if($type == 'kr-regular'){ // 국문 regular\r\n        font-family: $fonts-face-custom-kr-regular;\r\n    }@else if($type == 'en-regular'){ // 영문 book-regular\r\n        font-family: $fonts-face-custom-en-regular;\r\n    }@else if($type == 'en-x-regular'){ // 영문 original regular\r\n        font-family: $fonts-face-custom-en-x-regular;\r\n    }@else if($type == 'en-x-kr-regular'){ // 영문 original regular, 국문 regular\r\n        font-family: $fonts-face-custom-en-x-regular, $fonts-face-custom-kr-regular;\r\n    }@else if($type == 'lgt-regular'){ // 영문 light, 국문 regular\r\n        font-family: $fonts-face-custom-lgt-regular;\r\n    }@else if($type == 'reg-smbold'){ // 영문 original regular, 국문 semibold\r\n        font-family: $fonts-face-custom-en-x-regular, $fonts-face-custom-smbold;\r\n    }@else if($type == 'smbold'){ // 국문 semi bold\r\n        font-family: $fonts-face-custom-smbold;\r\n    }@else if($type == 'bold'){\r\n        font-family: $fonts-face-custom-bold;\r\n    }@else if($type == 'kr-bold'){\r\n        font-family: $fonts-face-custom-kr-bold;\r\n    }@else if($type == null or $type=='default'){\r\n        font-family: $fonts-face-default;\r\n    }@else{\r\n        @error '유효하지 않는 폰트 타입입니다.';\r\n    }\r\n}","/// Font style : PX단위\r\n/// px단위를 사용할 경우 사용\r\n/// @param {Value}\tfont-face 믹스인 호출을 위한 플래그 값 정의\r\n/// @param {Value}\t$font-size, 단위는 px, 생략 가능\r\n/// @param {Value}\t$line-height(폰트 사이즈의 상대적 비율), 생략 가능\r\n/// @group fonts\r\n\r\n@mixin px-font($type:null, $font-size: null, $line-height:null){\r\n    //font-type\r\n    @if($type != null and $type !=''){\r\n        @include font-family($type);\r\n    }\r\n\r\n    //font-size\r\n    @if($font-size != null and $font-size != ''){\r\n        $font-size: if(unitless($font-size), $font-size, delUnit($font-size));\r\n        font-size: $font-size + px;\r\n    }\r\n\r\n    //line-height\r\n    @if($line-height != null and $line-height != ''){\r\n        @include line-height($font-size, $line-height);\r\n    }\r\n}\r\n\r\n\r\n/// Font style : VW 단위 변환\r\n/// 각 디바이스별로 mixin정의\r\n/// @param {Value}\tfont-face 믹스인 호출을 위한 플래그 값 정의\r\n/// @param {Value}\t$font-size, 단위는 px, 생략 가능\r\n/// @param {Value}\t$line-height(폰트 사이즈의 상대적 비율), 생략 가능\r\n/// @group fonts\r\n\r\n\r\n\r\n@mixin vw-font-pc($type:null, $font-size: null, $line-height:null){\r\n    //font-type\r\n    @if($type != null and $type !=''){\r\n        @include font-family($type);\r\n    }\r\n\r\n    //font-size\r\n    @if($font-size != null and $font-size != ''){\r\n        $font-size: if(unitless($font-size), $font-size, delUnit($font-size));\r\n        @include vw-convert-pc(font-size, $font-size);\r\n    }\r\n\r\n    //line-height\r\n    @if($line-height != null and $line-height != ''){\r\n        @include line-height($font-size, $line-height);\r\n    }\r\n}\r\n\r\n@mixin vw-font-tb($type:null, $font-size: null, $line-height:null){\r\n    //font-type\r\n    @if($type != null and $type !=''){\r\n        @include font-family($type);\r\n    }\r\n\r\n    //font-size\r\n    @if($font-size != null and $font-size != ''){\r\n        $font-size: if(unitless($font-size), $font-size, delUnit($font-size));\r\n        @include vw-convert-tb(font-size, $font-size);\r\n    }\r\n\r\n    //line-height\r\n    @if($line-height != null and $line-height != ''){\r\n        @include line-height($font-size, $line-height);\r\n    }\r\n}\r\n\r\n@mixin vw-font-mo($type:null, $font-size: null, $line-height:null){\r\n    //font-type\r\n    @if($type != null and $type !=''){\r\n        @include font-family($type);\r\n    }\r\n\r\n    //font-size\r\n    @if($font-size != null and $font-size != ''){\r\n        $font-size: if(unitless($font-size), $font-size, delUnit($font-size));\r\n        @include vw-convert-mo(font-size, $font-size);\r\n    }\r\n\r\n    //line-height\r\n    @if($line-height != null and $line-height != ''){\r\n        @include line-height($font-size, $line-height);\r\n    }\r\n}","/// Font style : line-height\r\n/// @param {Value}\tfont-size\r\n/// @param {Value}\t$line-height의 px값\r\n/// @group fonts\r\n\r\n@mixin line-height($arg...){\r\n    @if(length($arg) > 1){\r\n        $font-size: nth($arg, 1);\r\n        $line-height: nth($arg, 2);\r\n        $type-line-height: type_of($line-height);\r\n\r\n        @if($type-line-height == number){\r\n            $line-height : if(unitless($line-height), $line-height, delUnit($line-height));\r\n            line-height: $line-height / $font-size;\r\n        } @else if($type-line-height == string){\r\n            line-height: $line-height;\r\n        }\r\n    }@else{\r\n        line-height: $arg;\r\n    }\r\n}","/// Clearfix\r\n/// @access public\r\n/// @group etc.\r\n\r\n@mixin clearfix(){\r\n    &:before,\r\n    &:after {\r\n        content: \" \";\r\n        display: table;\r\n    }\r\n    &:after {\r\n        clear: both;\r\n    }\r\n}","@mixin placeholder($selector:null){\r\n    #{$selector}::placeholder {\r\n        @content;\r\n    }\r\n}\r\n\r\n\r\n","// Text Styling\r\n@mixin multi-ellipsis($line){\r\n\tdisplay:block;\r\n\tdisplay:-webkit-box;\r\n\toverflow:hidden;\r\n\t-webkit-line-clamp:$line;\r\n\t-webkit-box-orient:vertical;\r\n\ttext-overflow:ellipsis;\r\n}\r\n","/// VW CONVERSION\r\n/// @access public\r\n\r\n\r\n// vw conversion PC\r\n@mixin vw-convert-pc($property, $pc-pixel) {\r\n    $psd-pixel: delUnit($psd-pc-width);\r\n    @if type-of($pc-pixel) == number {\r\n        #{$property}: $pc-pixel*1px;\r\n        #{$property}: $pc-pixel*100/$psd-pixel*1vw;\r\n        @media (min-width:$psd-pc-width) {\r\n            #{$property}: $pc-pixel*1px;\r\n        }\r\n    }\r\n    @else if type-of($pc-pixel) == string {\r\n        #{$property}: auto;\r\n        @media (min-width:$psd-pc-width) {\r\n            #{$property}: auto;\r\n        }\r\n    }\r\n    @else if type-of($pc-pixel) == list {\r\n        $px: ();\r\n        $vw: ();\r\n        @each $value in $pc-pixel {\r\n            @if type-of($value) == number {\r\n                $px: append($px, $value*1px);\r\n                $vw: append($vw, $value*100/$psd-pixel*1vw);\r\n            }\r\n            @else if type-of($value) == string {\r\n                $px: append($px, auto);\r\n                $vw: append($vw, auto);\r\n            }\r\n        }\r\n        #{$property}: $px;\r\n        #{$property}: $vw;\r\n\r\n        $px: ();\r\n        @each $value in $pc-pixel {\r\n            @if type-of($value) == number {\r\n                $px: append($px, $value*1px);\r\n            }\r\n            @else if type-of($value) == string {\r\n                $px: append($px, auto);\r\n            }\r\n        }\r\n        @media (min-width:$psd-pc-width) {\r\n            #{$property}: $px;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// vw conversion Tablet - max 1280\r\n@mixin vw-convert-tb($property, $tb-pixel){\r\n    $psd-pixel: delUnit($psd-tablet-width);\r\n    @if type-of($tb-pixel) == number {\r\n        #{$property}: $tb-pixel*1px;\r\n        #{$property}: $tb-pixel*100/$psd-pixel*1vw;\r\n    }\r\n    @else if type-of($tb-pixel) == string {\r\n        #{$property}: auto;\r\n    }\r\n    @else if type-of($tb-pixel) == list {\r\n        $px: ();\r\n        $vw: ();\r\n        @each $value in $tb-pixel {\r\n            @if type-of($value) == number {\r\n                $px: append($px, $value*1px);\r\n                $vw: append($vw, $value*100/$psd-pixel*1vw);\r\n            }\r\n            @else if type-of($value) == string {\r\n                $px: append($px, auto);\r\n                $vw: append($vw, auto);\r\n            }\r\n        }\r\n\r\n        #{$property}:$px;\r\n        #{$property}:$vw;\r\n    }\r\n}\r\n\r\n\r\n// vw conversion Mobile\r\n@mixin vw-convert-mo($property, $mo-pixel){\r\n    $psd-pixel: delUnit($psd-mobile-width);\r\n    @if type-of($mo-pixel) == number {\r\n        #{$property}: $mo-pixel*100/$psd-pixel*1vw;\r\n    }\r\n    @else if type-of($mo-pixel) == string {\r\n        #{$property}: auto;\r\n    }\r\n    @else if type-of($mo-pixel) == list {\r\n        $vw: ();\r\n        @each $value in $mo-pixel {\r\n            @if type-of($value) == number {\r\n                $vw: append($vw, $value*100/$psd-pixel*1vw);\r\n            }\r\n            @else if type-of($value) == string {\r\n                $vw: append($vw, auto);\r\n            }\r\n        }\r\n        #{$property}:$vw;\r\n    }\r\n}\r\n\r\n// vw conversion normal\r\n@mixin vw-convert($property, $pc-pixel, $psd-pc-width) {\r\n    $psd-pixel: delUnit($psd-pc-width);\r\n\r\n    @if type-of($pc-pixel) == number {\r\n        #{$property}: $pc-pixel*1px;\r\n        #{$property}: $pc-pixel*100/$psd-pixel*1vw;\r\n    }\r\n    @else if type-of($pc-pixel) == string {\r\n        #{$property}: auto;\r\n    }\r\n    @else if type-of($pc-pixel) == list {\r\n        $px: ();\r\n        $vw: ();\r\n        @each $value in $pc-pixel {\r\n            @if type-of($value) == number {\r\n                $px: append($px, $value*1px);\r\n                $vw: append($vw, $value*100/$psd-pixel*1vw);\r\n            }\r\n            @else if type-of($value) == string {\r\n                $px: append($px, auto);\r\n                $vw: append($vw, auto);\r\n            }\r\n        }\r\n        #{$property}: $px;\r\n        #{$property}: $vw;\r\n    }\r\n}","//  Author: Rafal Bromirski\r\n//  www: http://rafalbromirski.com/\r\n//  github: http://github.com/paranoida/sass-mediaqueries\r\n//\r\n//  Licensed under a MIT License\r\n//\r\n//  Version:\r\n//  1.6.1\r\n\r\n// --- generator ---------------------------------------------------------------\r\n\r\n@mixin break-point($args...){\r\n    $first:null;\r\n    $second:null;\r\n    $third:null;\r\n    @if(length($args) == 3){\r\n        $first:nth($args, 1);\r\n        $second:nth($args, 2);\r\n        $third:nth($args, 3);\r\n    }@else if(length($args) == 2){\r\n        $first:nth($args, 1);\r\n        $second:nth($args, 2);\r\n    }@else if(length($args) == 1){\r\n        $list-args:nth($args,1);\r\n        $first:nth($list-args, 1);\r\n        $second:nth($list-args, 2);\r\n    }\r\n\r\n    @if(type_of($second) == string){\r\n        @if($second == min){\r\n            @include min-screen($first){\r\n                @content;\r\n            }\r\n        }@else if($second == max){\r\n            @include max-screen($first){\r\n                @content;\r\n            }\r\n        }@else if($second == minH){\r\n            @include min-screen-height($first){\r\n                @content;\r\n            }\r\n        }@else if($second == maxH){\r\n            @include max-screen-height($first){\r\n                @content;\r\n            }\r\n        }@else if($second == height){\r\n            @include screen-height($first){\r\n                @content;\r\n            }\r\n        }\r\n    }@else if(type_of($second) == number){\r\n        @include screen($first, $second, $third){\r\n            @content;\r\n        }\r\n    }\r\n}\r\n\r\n@mixin mq($args...) {\r\n    $media-type: 'only screen';\r\n    $media-type-key: 'media-type';\r\n    $args: keywords($args);\r\n    $expr: '';\r\n\r\n    @if map-has-key($args, $media-type-key) {\r\n        $media-type: map-get($args, $media-type-key);\r\n        $args: map-remove($args, $media-type-key);\r\n    }\r\n\r\n    @each $key, $value in $args {\r\n        @if $value {\r\n            $expr: \"#{$expr} and (#{$key}: #{$value})\";\r\n        }\r\n    }\r\n\r\n    $temp : #{$media-type} #{$expr};\r\n\r\n    @media #{$temp} {\r\n        @content;\r\n    }\r\n}\r\n\r\n// --- screen ------------------------------------------------------------------\r\n\r\n@mixin screen($min, $max, $orientation: false) {\r\n    @include mq($min-width: $min, $max-width: $max, $orientation: $orientation) {\r\n        @content;\r\n    }\r\n}\r\n\r\n@mixin max-screen($max) {\r\n    @include mq($max-width: $max) {\r\n        @content;\r\n    }\r\n}\r\n\r\n@mixin min-screen($min) {\r\n    @include mq($min-width: $min) {\r\n        @content;\r\n    }\r\n}\r\n\r\n@mixin screen-height($min, $max, $orientation: false) {\r\n    @include mq($min-height: $min, $max-height: $max, $orientation: $orientation) {\r\n        @content;\r\n    }\r\n}\r\n\r\n@mixin max-screen-height($max) {\r\n    @include mq($max-height: $max) {\r\n        @content;\r\n    }\r\n}\r\n\r\n@mixin min-screen-height($min) {\r\n    @include mq($min-height: $min) {\r\n        @content;\r\n    }\r\n}\r\n\r\n// --- hdpi --------------------------------------------------------------------\r\n\r\n@mixin hdpi($ratio: 1.3) {\r\n    @media only screen and (-webkit-min-device-pixel-ratio: $ratio),\r\n    only screen and (min-resolution: #{round($ratio*96)}dpi) {\r\n        @content;\r\n    }\r\n}\r\n\r\n// --- hdtv --------------------------------------------------------------------\r\n\r\n@mixin hdtv($standard: '1080') {\r\n    $min-width: false;\r\n    $min-height: false;\r\n\r\n    $standards: ('720p', 1280px, 720px)\r\n            ('1080', 1920px, 1080px)\r\n            ('2K', 2048px, 1080px)\r\n            ('4K', 4096px, 2160px);\r\n\r\n    @each $s in $standards {\r\n        @if $standard == nth($s, 1) {\r\n            $min-width: nth($s, 2);\r\n            $min-height: nth($s, 3);\r\n        }\r\n    }\r\n\r\n    @include mq(\r\n            $min-device-width: $min-width,\r\n            $min-device-height: $min-height,\r\n            $min-width: $min-width,\r\n            $min-height: $min-height\r\n    ) {\r\n        @content;\r\n    }\r\n}\r\n\r\n// --- iphone4 -----------------------------------------------------------------\r\n\r\n@mixin iphone4($orientation: false) {\r\n    $min: 320px;\r\n    $max: 480px;\r\n    $pixel-ratio: 2;\r\n    $aspect-ratio: '2/3';\r\n\r\n    @include mq(\r\n            $min-device-width: $min,\r\n            $max-device-width: $max,\r\n            $orientation: $orientation,\r\n            $device-aspect-ratio: $aspect-ratio,\r\n            $-webkit-device-pixel-ratio: $pixel-ratio\r\n    ) {\r\n        @content;\r\n    }\r\n}\r\n\r\n// --- iphone5 -----------------------------------------------------------------\r\n\r\n@mixin iphone5($orientation: false) {\r\n    $min: 320px;\r\n    $max: 568px;\r\n    $pixel-ratio: 2;\r\n    $aspect-ratio: '40/71';\r\n\r\n    @include mq(\r\n            $min-device-width: $min,\r\n            $max-device-width: $max,\r\n            $orientation: $orientation,\r\n            $device-aspect-ratio: $aspect-ratio,\r\n            $-webkit-device-pixel-ratio: $pixel-ratio\r\n    ) {\r\n        @content;\r\n    }\r\n}\r\n\r\n// --- iphone6 -----------------------------------------------------------------\r\n\r\n@mixin iphone6($orientation: false) {\r\n    $min: 375px;\r\n    $max: 667px;\r\n    $pixel-ratio: 2;\r\n\r\n    @include mq(\r\n            $min-device-width: $min,\r\n            $max-device-width: $max,\r\n            $orientation: $orientation,\r\n            $-webkit-device-pixel-ratio: $pixel-ratio\r\n    ) {\r\n        @content;\r\n    }\r\n}\r\n\r\n// --- iphone6 plus ------------------------------------------------------------\r\n\r\n@mixin iphone6-plus($orientation: false) {\r\n    $min: 414px;\r\n    $max: 736px;\r\n    $pixel-ratio: 3;\r\n\r\n    @include mq(\r\n            $min-device-width: $min,\r\n            $max-device-width: $max,\r\n            $orientation: $orientation,\r\n            $-webkit-device-pixel-ratio: $pixel-ratio\r\n    ) {\r\n        @content;\r\n    }\r\n}\r\n\r\n// --- ipad (all) --------------------------------------------------------------\r\n\r\n@mixin ipad($orientation: false) {\r\n    $min: 768px;\r\n    $max: 1024px;\r\n\r\n    @include mq(\r\n            $min-device-width: $min,\r\n            $max-device-width: $max,\r\n            $orientation: $orientation\r\n    ) {\r\n        @content;\r\n    }\r\n}\r\n\r\n// --- ipad-retina -------------------------------------------------------------\r\n\r\n@mixin ipad-retina($orientation: false) {\r\n    $min: 768px;\r\n    $max: 1024px;\r\n    $pixel-ratio: 2;\r\n\r\n    @include mq(\r\n            $min-device-width: $min,\r\n            $max-device-width: $max,\r\n            $orientation: $orientation,\r\n            $-webkit-device-pixel-ratio: $pixel-ratio\r\n    ) {\r\n        @content;\r\n    }\r\n}\r\n\r\n// --- orientation -------------------------------------------------------------\r\n\r\n@mixin landscape() {\r\n    @include mq($orientation: landscape) {\r\n        @content;\r\n    }\r\n}\r\n\r\n@mixin portrait() {\r\n    @include mq($orientation: portrait) {\r\n        @content;\r\n    }\r\n}","/// Generates a triangle pointing in a specified direction.\r\n///\r\n/// @argument {string} $direction\r\n///   The direction the triangle should point. Accepts `up`, `up-right`,\r\n///   `right`, `down-right`, `down`, `down-left`, `left` or `up-left`.\r\n///\r\n/// @argument {number (with unit)} $width\r\n///   Width of the triangle.\r\n///\r\n/// @argument {number (with unit)} $height\r\n///   Height of the triangle.\r\n///\r\n/// @argument {color} $color\r\n///   Color of the triangle.\r\n///\r\n/// @example scss\r\n///   .element {\r\n///     &::before {\r\n///       @include triangle(\"up\", 2rem, 1rem, #b25c9c);\r\n///       content: \"\";\r\n///     }\r\n///   }\r\n///\r\n///   // CSS Output\r\n///   .element::before {\r\n///     border-style: solid;\r\n///     height: 0;\r\n///     width: 0;\r\n///     border-color: transparent transparent #b25c9c;\r\n///     border-width: 0 1rem 1rem;\r\n///     content: \"\";\r\n///   }\r\n/// @group icon\r\n\r\n@mixin triangle($direction, $width, $height, $color){\r\n    @if not index(\r\n    \"up\" \"up-right\" \"right\" \"down-right\" \"down\" \"down-left\" \"left\" \"up-left\",\r\n    $direction\r\n  ) {\r\n        @error \"Direction must be `up`, `up-right`, `right`, `down-right`, \" +\r\n           \"`down`, `down-left`, `left` or `up-left`.\";\r\n    } @else if not _is-color($color) {\r\n        @error \"`#{$color}` is not a valid color for the `$color` argument in \" +\r\n           \"the `triangle` mixin.\";\r\n    } @else {\r\n        border-style: solid;\r\n        height: 0;\r\n        width: 0;\r\n\r\n        @if $direction == \"up\" {\r\n            border-color: transparent transparent $color;\r\n            border-width: 0 ($width / 2) $height;\r\n        } @else if $direction == \"up-right\" {\r\n            border-color: transparent $color transparent transparent;\r\n            border-width: 0 $width $width 0;\r\n        } @else if $direction == \"right\" {\r\n            border-color: transparent transparent transparent $color;\r\n            border-width: ($height / 2) 0 ($height / 2) $width;\r\n        } @else if $direction == \"down-right\" {\r\n            border-color: transparent transparent $color;\r\n            border-width: 0 0 $width $width;\r\n        } @else if $direction == \"down\" {\r\n            border-color: $color transparent transparent;\r\n            border-width: $height ($width / 2) 0;\r\n        } @else if $direction == \"down-left\" {\r\n            border-color: transparent transparent transparent $color;\r\n            border-width: $width 0 0 $width;\r\n        } @else if $direction == \"left\" {\r\n            border-color: transparent $color transparent transparent;\r\n            border-width: ($height / 2) $width ($height / 2) 0;\r\n        } @else if $direction == \"up-left\" {\r\n            border-color: $color transparent transparent;\r\n            border-width: $width $width 0 0;\r\n        }\r\n    }\r\n}\r\n\r\n","/// SVG 생성\r\n/// @param {Value} svg path\r\n/// @param {boolean} use fallback image\r\n/// @group icon\r\n@mixin svg-clip($args...){\r\n    $img-path: nth($args, 1);\r\n    $image: nth($args, 2);\r\n    $useFallbackImg:false;\r\n\r\n    @each $i in $args{\r\n        @if(type_of($i) == bool){\r\n            $useFallbackImg: $i;\r\n        }\r\n    }\r\n\r\n    background: url($img-path + $image);\r\n\r\n    @if($useFallbackImg){\r\n        @at-root .no-svg & {\r\n            $start: str-index($image, '.')-1;\r\n            $file: (str_slice($image, 0, $start));\r\n            $image : $file + '.png';\r\n            background-image: url($img-path + $image);\r\n        }\r\n    }\r\n}","/// BEM\r\n/// @access public\r\n/// @author Marcmintel\r\n/// @link https://medium.com/@marcmintel/pushing-bem-to-the-next-level-with-sass-3-4-5239d2371321\r\n/// @group etc.\r\n\r\n$elementSeparator: '__';\r\n\r\n$modifierSeparator: '--';\r\n\r\n\r\n\r\n/// 将`$selector`转换成String\r\n/// @access private\r\n/// @param  {String}  $selector\r\n/// @return {String}  $selector\r\n@function selectorToString($selector) {\r\n    $selector: inspect($selector); //cast to string\r\n    $selector: str-slice($selector, 2, -2); //remove brackets\r\n    @return $selector;\r\n}\r\n\r\n/// 判断`$selector`中是否包含BEM中Modify\r\n/// @access private\r\n/// @param  {String}  $selector\r\n/// @return {Boolean} `true` or `false`\r\n\r\n@function containsModifier($selector) {\r\n    $selector: selectorToString($selector);\r\n\r\n    @if str-index($selector, $modifierSeparator) {\r\n        @return true;\r\n    } @else {\r\n        @return false;\r\n    }\r\n}\r\n\r\n/// @param  {String}  $selector\r\n/// @access private\r\n/// @return {String}\r\n@function getBlock($selector) {\r\n    $selector: selectorToString($selector);\r\n    $modifierStart: str-index($selector, $modifierSeparator) - 1;\r\n    @return str-slice($selector, 0, $modifierStart);\r\n}\r\n\r\n/// @param {string} $block - BEM中的Block\r\n/// @content\r\n/// @example\r\n///  //SCSS\r\n///  @include b(block) {\r\n///     background: red;\r\n///     @include e(header){\r\n///         font-size: 14px;\r\n///\r\n///         @include m(css) {\r\n///             font-size: 18px;\r\n///         }\r\n///     };\r\n///  }\r\n///  //CSS\r\n///  .block {\r\n///      background: red;\r\n///  }\r\n///  .block__header {\r\n///     font-size: 14px;\r\n///  }\r\n///  .block__header--css {\r\n///     font-size: 18px;\r\n///  }\r\n\r\n@mixin b($block) {\r\n    .#{$block} {\r\n        @content;\r\n    }\r\n}\r\n\r\n/// @param {string} $element - BEM中的Element\r\n/// @content\r\n/// @example\r\n///  //SCSS\r\n///  @include b(block) {\r\n///     background: red;\r\n///     @include e(header){\r\n///         font-size: 14px;\r\n///\r\n///         @include m(css) {\r\n///             font-size: 18px;\r\n///         }\r\n///     };\r\n///  }\r\n///  //CSS\r\n///  .block {\r\n///      background: red;\r\n///  }\r\n///  .block__header {\r\n///     font-size: 14px;\r\n///  }\r\n///  .block__header--css {\r\n///     font-size: 18px;\r\n///  }\r\n@mixin e($element) {\r\n    $selector: &;\r\n    @if containsModifier($selector) {\r\n        $block: getBlock($selector);\r\n        @at-root {\r\n            #{$selector} {\r\n                #{$block+$elementSeparator+$element} {\r\n                    @content;\r\n                }\r\n            }\r\n        }\r\n    } @else {\r\n        @at-root {\r\n            #{$selector+$elementSeparator+$element} {\r\n                @content;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/// @param {string} $element - BEM中的Modify\r\n/// @content\r\n/// @example\r\n///  //SCSS\r\n///  @include b(block) {\r\n///     background: red;\r\n///     @include e(header){\r\n///         font-size: 14px;\r\n///\r\n///         @include m(css) {\r\n///             font-size: 18px;\r\n///         }\r\n///     };\r\n///  }\r\n///  //CSS\r\n///  .block {\r\n///      background: red;\r\n///  }\r\n///  .block__header {\r\n///     font-size: 14px;\r\n///  }\r\n///  .block__header--css {\r\n///     font-size: 18px;\r\n///  }\r\n@mixin m($modifier) {\r\n    @at-root {\r\n        #{&}#{$modifierSeparator+$modifier} {\r\n            @content;\r\n        }\r\n    }\r\n}\r\n\r\n","/// Checks if a list contains a value(s).\r\n///\r\n/// @argument {list} $list\r\n///   The list to check against.\r\n///\r\n/// @argument {list} $values\r\n///   A single value or list of values to check for.\r\n///\r\n/// @return {boolean}\r\n///\r\n/// @access private\r\n\r\n@function _contains($list,$values...) {\r\n  @each $value in $values {\r\n    @if type-of(index($list, $value)) != \"number\" {\r\n      @return false;\r\n    }\r\n  }\r\n\r\n  @return true;\r\n}\r\n","/// Checks if a list does not contain any values.\r\n///\r\n/// @argument {list} $list\r\n///   The list to check against.\r\n///\r\n/// @return {boolean}\r\n///\r\n/// @access private\r\n\r\n@function _contains-falsy($list) {\r\n  @each $item in $list {\r\n    @if not $item {\r\n      @return true;\r\n    }\r\n  }\r\n\r\n  @return false;\r\n}\r\n","/// Checks for a valid CSS color.\r\n///\r\n/// @argument {string} $color\r\n///\r\n/// @return {boolean}\r\n///\r\n/// @access private\r\n\r\n@function _is-color($color) {\r\n  @return (type-of($color) == color) or ($color == \"currentColor\");\r\n}\r\n","/// Checks for a valid CSS length.\r\n///\r\n/// @argument {string} $value\r\n///\r\n/// @return {boolean}\r\n///\r\n/// @access private\r\n\r\n@function _is-length($value) {\r\n  @return type-of($value) != \"null\" and (str-slice($value + \"\", 1, 4) == \"calc\"\r\n       or index(auto inherit initial 0, $value)\r\n       or (type-of($value) == \"number\" and not(unitless($value))));\r\n}\r\n","/// Checks for a valid number.\r\n///\r\n/// @argument {number} $value\r\n///\r\n/// @require {function} _contains\r\n///\r\n/// @return {boolean}\r\n///\r\n/// @access private\r\n\r\n@function _is-number($value) {\r\n  @return _contains(\"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" 0 1 2 3 4 5 6 7 8 9, $value);\r\n}\r\n","/// Checks for a valid CSS size.\r\n///\r\n/// @argument {string} $value\r\n///\r\n/// @return {boolean}\r\n///\r\n/// @require {function} _contains\r\n///\r\n/// @require {function} _is-length\r\n///\r\n/// @access private\r\n\r\n@function _is-size($value) {\r\n  @return _is-length($value)\r\n          or _contains(\"fill\" \"fit-content\" \"min-content\" \"max-content\", $value);\r\n}\r\n","@import \"contents/all_contents\";\r\n@import \"layout/all_layouts\";\r\n@import \"partials/all_partials\";","/* custom-contents */\r\n\r\na.btn{\r\n  color:gold;\r\n  font-weight: bold;\r\n  text-shadow:2px 2px 4px black;\r\n}\r\n","/* custom-layout */\r\n","@import \"pieces/icons\";\r\n@import \"components/boxs\";\r\n\r\n","/* icon sytyle */\r\n\r\n\r\n\r\n\r\n\r\n","/* 컴포넌트에서 테스트 페이지에서 */\r\nbody{color:gold;\r\nbackground: skyblue;\r\n}"],"mappings":";AkCAA,qBAAqB;AAErB,AAAC,CAAA,AAAA,IAAI,CAAA,EACH,KAAK,EAAC,IAAK,EACX,WAAW,EAAE,IAAK,EAClB,WAAW,EAAC,iBAAkB,GAC/B;;ACND,mBAAmB;AEAnB,iBAAiB;ACAjB,kDAAkD;AAClD,AAAA,IAAI,CAAA,EAAC,KAAK,EAAC,IAAK,EAChB,UAAU,EAAE,OAAQ,GACnB;;AZqEG,AAAA,cAAc,CAAd,E1B5DA,UAAU,EAAE,GAAI,G0B8Df;;AAwCO,AAAA,sBAAsB,CAAtB,E1BnGA,SAAS,EAAE,IAAK,G0BqGf;;AA+BL,AAAA,2BAA2B,CAA3B,E1BjIQ,SAAS,EAAE,IAAK,EAChB,WAAW,EAAE,IAAK,G0BkIzB;;A1B5HT,AAAA,YAAY,CAAA,EACR,OAAO,EAAC,6BAA6B,CUxB5B,EAAM,GV0BlB;;AAMD,AAAA,iBAAiB,CAAA,EACb,gCAAgC,CehBxB,gBAAgB,EfiByB,GAAG,EeR7C,gBAAgB,EAAE,gCAAG,EfS5B,8CAA8C,CelBtC,gBAAgB,EfmBqC,KAAK,Ea1BlE,gBAAgB,EAAE,6CAAG,EEOb,gBAAgB,EfoBkD,OAAO,Ea3BjF,gBAAgB,EAAE,mDAAG,EEOb,gBAAgB,EfqB0B,IAAI,EeZ/C,gBAAgB,EAAE,iCAAG,EFhB5B,gBAAgB,EAAE,4CAAG,Gb8BxB;;Aa5BG,MAAM,MAAD,MAAM,MAAM,8BAAC,EAA+B,CAAC,QAAQ,MAAM,MAAM,2BAA2B,EAAE,CAAC,QAAQ,MAAM,MAAM,yBAAC,EAA0B,CAAC,GAAC,CAAC,QAAQ,MAAM,MAAM,sBAAsB,EAAE,CAAC,QAAQ,MAAM,MAAM,cAAc,EAAE,MAAM,QAAQ,MAAM,MAAM,cAAc,EAAE,KAAK,IboB1R,AAAA,iBAAiB,CAAA,EaXT,gBAAgB,EAAE,+CAAG,GbmB5B;;Aa5BG,MAAM,MAAD,MAAM,MAAM,8BAAC,EAA+B,CAAC,QAAQ,MAAM,MAAM,2BAA2B,EAAE,CAAC,QAAQ,MAAM,MAAM,yBAAC,EAA0B,CAAC,GAAC,CAAC,QAAQ,MAAM,MAAM,sBAAsB,EAAE,CAAC,QAAQ,MAAM,MAAM,cAAc,EAAE,MAAM,QAAQ,MAAM,MAAM,cAAc,EAAE,KAAK,IboB1R,AAAA,iBAAiB,CAAA,EaXT,gBAAgB,EAAE,qDAAG,GbmB5B;;Aa5BG,MAAM,MAAD,MAAM,MAAM,8BAAC,EAA+B,CAAC,QAAQ,MAAM,MAAM,2BAA2B,EAAE,CAAC,QAAQ,MAAM,MAAM,yBAAC,EAA0B,CAAC,GAAC,CAAC,QAAQ,MAAM,MAAM,sBAAsB,EAAE,CAAC,QAAQ,MAAM,MAAM,cAAc,EAAE,MAAM,QAAQ,MAAM,MAAM,cAAc,EAAE,KAAK,IboB1R,AAAA,iBAAiB,CAAA,EaXT,gBAAgB,EAAE,8CAAG,GbmB5B;;AAED,AAAA,4BAA4B,CAAA,EACxB,4BAA4B,Ce1BpB,gBAAgB,Ef2ByB,wBAAI,EelB9C,gBAAgB,EAAE,gCAAG,GfmB/B;;AAED,AAAA,qBAAqB,CAAA,EczCT,iBAAiB,EAAE,MAAO,EAa9B,mBAAmB,Ed8BJ,IAAI,CAAC,GAAG,EczBvB,eAAe,EdyBU,KAAK,EczC1B,iBAAiB,EAAE,QAAS,EAWhC,mBAAmB,Ed+BH,GAAG,CAAC,GAAG,EctCnB,iBAAiB,EAAE,SAAU,EAOjC,mBAAmB,EdgCH,IAAI,CAAC,IAAI,EcvCrB,iBAAiB,EAAE,SAAU,EAYjC,eAAe,Ed4BK,OAAO,GAClC;;AoBtDG,AAAA,aAAa,CAAb,EpB4DA,KAAK,EAAC,IAAK,GoB1DV;;ApB8DL,AAAA,qBAAqB,CAAA,EAQjB,KAAK,EAAM,oBAAG,GACjB;;AATD,AACmB,qBADE,CACjB,KAAK,CAAA,AAAA,IAAC,CAAD,IAAC,AAAA,EAAU,EACZ,SAAS,EAAC,IAAK,EACf,WAAW,EAAC,CAAE,GACjB;;AAJL,AoBhEoB,qBpBgEC,CoBhEjB,KAAK,CAAA,AAAA,IAAC,CAAD,IAAC,AAAA,CAAU,aAAa,CAA7B,EpBsEI,KAAK,EAAC,YAAa,GoBpEtB;;ApB8EL,6BAA6B;AAC7B,AAAA,IAAI,AACC,OAAO,CAAA,EACJ,OAAO,EAAE,oBAAa,GACzB;;AAKL,AAAA,aAAa,CAAA,EgB/DL,WAAW,EXhBf,WAAW,EANX,iBAAiB,EYWb,SAAS,EPdJ,IAAM,EQWP,WAAW,EAAE,CAAY,GlB+EpC;;AAGD,AAAA,gBAAgB,CAAA,EgBpER,WAAW,EXhBf,WAAW,EANX,iBAAiB,EiBGb,SAAY,EAAE,IAAS,EACvB,SAAY,EAAE,OAAS,EJInB,WAAW,EAAE,QAAY,GlBoFpC;;AsBvFO,MAAM,EAAL,SAAS,EAAE,MAAM,ItBqF1B,AAAA,gBAAgB,CAAA,EsBpFJ,SAAY,EAAE,IAAS,GtBsFlC;;AAED,AAAA,WAAW,CAAA,EsBlEH,OAAY,EARa,IAAM,CAAN,IAAM,CAAN,IAAM,EAS/B,OAAY,EARa,QAAM,CAAN,UAAM,CAAN,UAAM,GtB2EtC;;AsBxDO,MAAM,EAAL,SAAS,EAAE,MAAM,ItBsD1B,AAAA,WAAW,CAAA,EsBrDC,OAAY,EAPS,IAAM,CAAN,IAAM,CAAN,IAAM,GtB8DtC;;AAED,AAAA,yBAAyB,CAAA,EkBrFjB,WAAW,ElBsFM,GAAG,EkBtFpB,WAAW,ElBuFM,IAAI,GAC5B;;AAED,sCAAsC;AuBhClC,MAAM,MAAD,MAAM,MAAO,SAAS,EAAE,KAAK,OAAO,SAAS,EAAE,MAAM,IvBkC1D,AAAA,IAAI,AACC,OAAO,CAAA,EACJ,OAAO,EAAE,gCAAoB,GAChC;CAGL,AAAA,oBAAoB,CAAA,EsB5DhB,SAAY,EAAE,IAAS,EACvB,SAAY,EAAE,SAAS,EJ5CnB,WAAW,EAAE,QAAY,GlByGhC;CAED,AAAA,eAAe,CAAA,EsB5CX,OAAY,EATa,IAAM,CAAN,IAAM,CAAN,IAAM,EAU/B,OAAY,EATa,SAAM,CAAN,SAAM,CAAN,QAAM,GtBsDlC;;AuB9CD,MAAM,MAAD,MAAM,MAAO,SAAS,EAAE,KAAK,IvBkDlC,AAAA,IAAI,AACC,OAAO,CAAA,EACJ,OAAO,EAAE,0BAAqB,GACjC;CAGL,AAAA,iBAAiB,CAAA,EsB9Cb,YAAY,EAAE,UAAS,EAAvB,UAAY,EAAE,UAAS,EAGvB,MAAY,EAAE,IAAK,GtB+CtB;CACD,AAAA,gBAAgB,CAAA,EsBpCZ,OAAY,EANa,GAAM,CAGN,IAAI,CAHJ,UAAM,GtB4ClC;CACD,AAAA,oBAAoB,CAAA,EsBtDhB,SAAY,EAAE,UAAS,EJzEnB,WAAW,EAAE,MAAY,EIoH7B,OAAY,EARa,IAAM,CAIN,IAAI,EAK7B,OAAY,EARa,UAAM,CAIN,IAAI,GtBmBhC;;AAGL,kCAAkC;AuBxE9B,MAAM,MAAD,MAAM,MAAO,SAAS,EAAE,MAAM,IvB0EnC,AAAA,iBAAiB,CAAA,EACb,KAAK,EAAC,IAAK,GACd;;AuB5ED,MAAM,MAAD,MAAM,MAAO,SAAS,EAAE,MAAM,IvBgFnC,AAAA,iBAAiB,CAAA,EACb,KAAK,EAAC,IAAK,GACd;;AuBlFD,MAAM,MAAD,MAAM,MAAO,SAAS,EAAE,MAAM,OAAO,SAAS,EAAE,MAAM,IvBuF3D,AAAA,cAAc,CAAA,EACV,KAAK,EAAC,GAAI,EsBnCV,OAAY,EARa,IAAM,CAIN,IAAI,CAJJ,IAAM,EAS/B,OAAY,EARa,QAAM,CAIN,IAAI,CAJJ,QAAM,GtB4ClC;;AuB1FD,MAAM,MAAD,MAAM,MAAO,SAAS,EAAE,MAAM,OAAO,SAAS,EAAE,MAAM,OAAO,WAAW,EAAE,QAAQ,IvB8FvF,AAAA,uBAAuB,CAAA,EACnB,KAAK,EAAC,GAAI,EsB1CV,OAAY,EARa,IAAM,CAIN,IAAI,CAJJ,IAAM,EAS/B,OAAY,EARa,QAAM,CAIN,IAAI,CAJJ,QAAM,GtBmDlC;;AuBjGD,MAAM,MAAD,MAAM,MAAO,UAAU,EAAE,KAAK,IvBqGnC,AAAA,IAAI,AACC,OAAO,CAAC,EACL,OAAO,EAAE,qBAAsB,GAClC;;AuBxGL,MAAM,MAAD,MAAM,MAAO,UAAU,EAAE,MAAM,IvB6GpC,AAAA,IAAI,AACC,OAAO,CAAC,EACL,OAAO,EAAE,sBAAuB,GACnC;;AuBhHL,MAAM,MAAD,MAAM,MAAO,WAAW,EAAE,SAAS,IvBqHxC,AAAA,IAAI,AACC,OAAO,CAAA,EACJ,OAAO,EAAC,cAAe,GAC1B;;AuBxHL,MAAM,MAAD,MAAM,MAAO,WAAW,EAAE,QAAQ,IvB6HvC,AAAA,IAAI,AACC,OAAO,CAAA,EACJ,OAAO,EAAC,cAAe,GAC1B;;AAUT,AAAA,cAAc,AAET,OAAO,CAAC,EwB3KL,YAAY,EAAE,KAAM,EACpB,MAAM,EAAE,CAAE,EACV,KAAK,EAAE,CAAE,EAGL,YAAY,EAAE,WAAW,CAAC,WAAW,CxBuKJ,OAAO,EwBtKxC,YAAY,EAAE,CAAC,CAAE,IAAM,CxBsKG,KAAK,EACnC,OAAO,EAAE,EAAG,GACf;;AAGL,AAAA,YAAY,CAAA,EchNA,iBAAiB,EAAE,SAAU,EAOjC,mBAAmB,Ed0MH,CAAC,CAAC,CAAC,EcrMnB,eAAe,EdqMM,KAAK,GAYjC;;AAbD,AAAA,YAAY,AAGP,mBAAmB,CAAA,EAChB,sIAAsI,CyBnN1I,UAAU,EAAE,8BAAG,GzBuNd;;AyBpNY,AzB4MjB,OyB5MwB,CzB4MxB,YAAY,AAGP,mBAAmB,CyB/MG,EAIf,gBAAgB,EAAE,8BAAG,GACxB;;AzBuMT,AAAA,YAAY,AASP,cAAc,CAAA,EACX,sCAAsC,CyBzN1C,UAAU,EAAE,mCAAG,GzB2Nd;;AAGL,AAAC,CAAA,AAAA,IAAI,CAAA,EACD,UAAU,EAAE,IAAK,EACjB,OAAO,EAAE,YAAa,EACtB,SAAS,EAAE,IAAK,EAChB,OAAO,EAAC,SAAU,EAClB,MAAM,EAAC,cAAe,EACtB,UAAU,EAAE,IAAK,GACpB","names":[]}